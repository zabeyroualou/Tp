/*
 * This file is generated by jOOQ.
 */
package models.cegib.compta.matieres;


import models.cegib.compta.matieres.tables.Categories;
import models.cegib.compta.matieres.tables.Commandes;
import models.cegib.compta.matieres.tables.Produits;
import models.cegib.compta.matieres.tables.Users;
import models.cegib.compta.matieres.tables.records.CategoriesRecord;
import models.cegib.compta.matieres.tables.records.CommandesRecord;
import models.cegib.compta.matieres.tables.records.ProduitsRecord;
import models.cegib.compta.matieres.tables.records.UsersRecord;

import org.jooq.ForeignKey;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;


/**
 * A class modelling foreign key relationships and constraints of tables in
 * public.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Keys {

    // -------------------------------------------------------------------------
    // UNIQUE and PRIMARY KEY definitions
    // -------------------------------------------------------------------------

    public static final UniqueKey<CategoriesRecord> CATEGORIES_PKEY = Internal.createUniqueKey(Categories.CATEGORIES, DSL.name("categories_pkey"), new TableField[] { Categories.CATEGORIES.CODE }, true);
    public static final UniqueKey<CommandesRecord> COMMANDE_PKEY = Internal.createUniqueKey(Commandes.COMMANDES, DSL.name("commande_pkey"), new TableField[] { Commandes.COMMANDES.ID }, true);
    public static final UniqueKey<ProduitsRecord> PRODUITS_PKEY = Internal.createUniqueKey(Produits.PRODUITS, DSL.name("produits_pkey"), new TableField[] { Produits.PRODUITS.ID }, true);
    public static final UniqueKey<UsersRecord> UTILISATEURS_PKEY = Internal.createUniqueKey(Users.USERS, DSL.name("utilisateurs_pkey"), new TableField[] { Users.USERS.ID }, true);

    // -------------------------------------------------------------------------
    // FOREIGN KEY definitions
    // -------------------------------------------------------------------------

    public static final ForeignKey<ProduitsRecord, CategoriesRecord> PRODUITS__PRODUITS_CATEGORIE_ID_FOREIGN = Internal.createForeignKey(Produits.PRODUITS, DSL.name("produits_categorie_id_foreign"), new TableField[] { Produits.PRODUITS.CATEGORIE }, Keys.CATEGORIES_PKEY, new TableField[] { Categories.CATEGORIES.CODE }, true);
}
